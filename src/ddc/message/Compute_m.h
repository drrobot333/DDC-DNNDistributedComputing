//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ddc/message/Compute.msg.
//

#ifndef __INET_COMPUTE_M_H
#define __INET_COMPUTE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class Compute;

}  // namespace inet

// cplusplus {{
#include "ddc/dnn/DNNSublayer.h"
// }}


namespace inet {

/**
 * Class generated from <tt>ddc/message/Compute.msg:19</tt> by opp_msgtool.
 * <pre>
 * packet Compute
 * {
 *     DNNSublayer *dnn_sublayer;
 * }
 * </pre>
 */
class Compute : public ::omnetpp::cPacket
{
  protected:
    DNNSublayer * dnn_sublayer = nullptr;

  private:
    void copy(const Compute& other);

  protected:
    bool operator==(const Compute&) = delete;

  public:
    Compute(const char *name=nullptr, short kind=0);
    Compute(const Compute& other);
    virtual ~Compute();
    Compute& operator=(const Compute& other);
    virtual Compute *dup() const override {return new Compute(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const DNNSublayer * getDnn_sublayer() const;
    virtual DNNSublayer * getDnn_sublayerForUpdate() { return const_cast<DNNSublayer *>(const_cast<Compute*>(this)->getDnn_sublayer());}
    virtual void setDnn_sublayer(DNNSublayer * dnn_sublayer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Compute& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Compute& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::DNNSublayer *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::DNNSublayer *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::DNNSublayer>(); }
template<> inline inet::Compute *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Compute*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_COMPUTE_M_H

