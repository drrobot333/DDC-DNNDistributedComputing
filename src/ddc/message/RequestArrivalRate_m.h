//
// Generated file, do not edit! Created by opp_msgtool 6.0 from ddc/message/RequestArrivalRate.msg.
//

#ifndef __INET_REQUESTARRIVALRATE_M_H
#define __INET_REQUESTARRIVALRATE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace inet {

class RequestArrivalRate;

}  // namespace inet

#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

// cplusplus {{
#include "ddc/layernode/LayerNode.h"
// }}


namespace inet {

/**
 * Class generated from <tt>ddc/message/RequestArrivalRate.msg:22</tt> by opp_msgtool.
 * <pre>
 * class RequestArrivalRate extends inet::Packet
 * {
 *     string agent_name;
 *     string callback_node_name;
 *     int callback_port;
 *     LayerNode src_layer_node;
 *     LayerNode dst_layer_node;
 * }
 * </pre>
 */
class RequestArrivalRate : public ::inet::Packet
{
  protected:
    ::omnetpp::opp_string agent_name;
    ::omnetpp::opp_string callback_node_name;
    int callback_port = 0;
    LayerNode src_layer_node;
    LayerNode dst_layer_node;

  private:
    void copy(const RequestArrivalRate& other);

  protected:
    bool operator==(const RequestArrivalRate&) = delete;

  public:
    RequestArrivalRate(const char *name=nullptr);
    RequestArrivalRate(const RequestArrivalRate& other);
    virtual ~RequestArrivalRate();
    RequestArrivalRate& operator=(const RequestArrivalRate& other);
    virtual RequestArrivalRate *dup() const override {return new RequestArrivalRate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const char * getAgent_name() const;
    virtual void setAgent_name(const char * agent_name);

    virtual const char * getCallback_node_name() const;
    virtual void setCallback_node_name(const char * callback_node_name);

    virtual int getCallback_port() const;
    virtual void setCallback_port(int callback_port);

    virtual const LayerNode& getSrc_layer_node() const;
    virtual LayerNode& getSrc_layer_nodeForUpdate() { return const_cast<LayerNode&>(const_cast<RequestArrivalRate*>(this)->getSrc_layer_node());}
    virtual void setSrc_layer_node(const LayerNode& src_layer_node);

    virtual const LayerNode& getDst_layer_node() const;
    virtual LayerNode& getDst_layer_nodeForUpdate() { return const_cast<LayerNode&>(const_cast<RequestArrivalRate*>(this)->getDst_layer_node());}
    virtual void setDst_layer_node(const LayerNode& dst_layer_node);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RequestArrivalRate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RequestArrivalRate& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::LayerNode *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::LayerNode *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::LayerNode>(); }
template<> inline inet::RequestArrivalRate *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::RequestArrivalRate*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_REQUESTARRIVALRATE_M_H

